use http::HeaderName;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Serialize, Deserialize)]
pub enum Category {
    InitContext,
    FinishContext,
    UpstreamContext,
    DownstreamContext,
    DownstreamRequest,
    DownstreamResponse,
    UpstreamRequest,
    UpstreamResponse,
    Argument,
}

#[derive(Clone, PartialEq, Eq, Hash, Debug, Serialize, Deserialize)]
pub enum Operator {
    RequestDuration,
    RequestTxDuration,
    ResponseDuration,
    ResponseTxDuration,
    DownstreamHandshakeDuration,
    RoundtripDuration,
    BytesReceived,
    BytesRetransmitted,
    PacketsRetransmitted,
    UpstreamWireBytesReceived,
    UpstreamHeaderBytesReceived,
    DownstreamWireBytesReceived,
    DownstreamHeaderBytesReceived,
    Protocol,
    UpstreamProtocol,
    ResponseCode,
    ResponseCodeDetails,
    ConnectionTerminationDetails,
    BytesSent,
    UpstreamWireBytesSent,
    UpstreamHeaderBytesSent,
    DownstreamWireBytesSent,
    DownstreamHeaderBytesSent,
    Duration,
    CommonDuration,
    CustomFlags,
    ResponseFlags,
    ResponseFlagsLong,
    UpstreamHostName,
    UpstreamHostNameWithoutPort,
    UpstreamHost,
    UpstreamConnectionId,
    UpstreamCluster,
    UpstreamClusterRaw,
    UpstreamLocalAddress,
    UpstreamLocalAddressWithoutPort,
    UpstreamLocalPort,
    UpstreamRemoteAddress,
    UpstreamRemoteAddressWithoutPort,
    UpstreamRemotePort,
    UpstreamRequestAttemptCount,
    UpstreamTlsCipher,
    UpstreamTlsVersion,
    UpstreamTlsSessionId,
    UpstreamPeerIssuer,
    UpstreamPeerCert,
    UpstreamPeerSubject,
    DownstreamLocalAddress,
    DownstreamDirectLocalAddress,
    DownstreamLocalAddressWithoutPort,
    DownstreamDirectLocalAddressWithoutPort,
    DownstreamLocalPort,
    DownstreamDirectLocalPort,
    DownstreamRemoteAddress,
    DownstreamRemoteAddressWithoutPort,
    DownstreamRemotePort,
    DownstreamDirectRemoteAddress,
    DownstreamDirectRemoteAddressWithoutPort,
    DownstreamDirectRemotePort,
    ConnectionId,
    RequestedServerName,
    RouteName,
    UpstreamPeerUriSan,
    UpstreamPeerDnsSan,
    UpstreamPeerIpSan,
    UpstreamLocalUriSan,
    UpstreamLocalDnsSan,
    UpstreamLocalIpSan,
    DownstreamPeerUriSan,
    DownstreamPeerDnsSan,
    DownstreamPeerIpSan,
    DownstreamPeerEmailSan,
    DownstreamPeerOthernameSan,
    DownstreamLocalUriSan,
    DownstreamLocalDnsSan,
    DownstreamLocalIpSan,
    DownstreamLocalEmailSan,
    DownstreamLocalOthernameSan,
    DownstreamPeerSubject,
    DownstreamLocalSubject,
    DownstreamTlsSessionId,
    DownstreamTlsCipher,
    DownstreamTlsVersion,
    DownstreamPeerFingerprint256,
    DownstreamPeerFingerprint1,
    DownstreamPeerSerial,
    DownstreamPeerChainFingerprints256,
    DownstreamPeerChainFingerprints1,
    DownstreamPeerChainSerials,
    DownstreamPeerIssuer,
    DownstreamPeerCert,
    DownstreamTransportFailureReason,
    UpstreamTransportFailureReason,
    Hostname,
    FilterChainName,
    VirtualClusterName,
    TlsJa3Fingerprint,
    UniqueId,
    StreamId,
    StartTime,
    StartTimeLocal,
    EmitTime,
    EmitTimeLocal,
    DynamicMetadata,
    ClusterMetadata,
    UpstreamMetadata,
    FilterState,
    UpstreamFilterState,
    DownstreamPeerCertVStart,
    DownstreamPeerCertVEnd,
    UpstreamPeerCertVStart,
    UpstreamPeerCertVEnd,
    Environment,
    UpstreamConnectionPoolReadyDuration,
    Request, // placeholder
    RequestScheme,
    RequestMethod,
    RequestPath,
    RequestOriginalPathOrPath,
    RequestAuthority,
    #[serde(with = "http_serde_ext::header_name")]
    RequestStandard(HeaderName),
    Response, // placeholder
    #[serde(with = "http_serde_ext::header_name")]
    ResponseStandard(HeaderName),
}
